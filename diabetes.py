# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vS34KMgI883LNdtwF5NzAUg_79sybB__

Importing dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analysis
PIMA  diabetes dataset
"""

diabetes_dataset=pd.read_csv('/content/diabetes (3)[259].csv')

#printing first five rows of the dataset  1-patient is diabetic   0-patient not diabetic

diabetes_dataset.head()

#number of rowws and columns in this dataset
diabetes_dataset.shape

#getting statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

#seperating the data and labels    , axis=1 if dropping a column and axis =0 if dropping a row
x=diabetes_dataset.drop(columns='Outcome',axis=1)
y=diabetes_dataset['Outcome']
print(x.dtypes)

print(x)

print(y)

"""Data stardardization"""

scaler=StandardScaler()

scaler.fit(x)

Standardized_data=scaler.transform(x)

print(Standardized_data)

x=Standardized_data
y=diabetes_dataset['Outcome']

print(x)

print(y)

"""Train-Test_split"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)
#test_size=0.2 means the size of the data used for testing here 0.2 means 20% of the data is used for testing and 80% for training
#stratify=y means similar amount of diabetic and non diabetic patient are given for training

print(x.shape , x_train.shape , x_test.shape)

"""Training the model"""

classifier =svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(x_train,y_train)

"""Model evaluvation

Accuracy score
"""

#accuracy score on the training data to check how many are predicted correctly
x_train_prediction=classifier.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('accuracy_score',training_data_accuracy)

#accuracy score on the test data
x_test_prediction=classifier.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('accuracy_score',test_data_accuracy)

"""Making a predictive system"""

input_data=(5,166,72,19,175,25.8,0.587,51)

#changing the input data to a numpy array
input_data_as_numpyarray=np.asarray(input_data)

#reshape the array as we r predicting foronr instance
input_data_reshape=input_data_as_numpyarray.reshape(1,-1)

#standardize the input data
std_data=scaler.transform(input_data_reshape)
print(std_data)

print('shape',std_data.shape)

print('classifierfitted')
print(hasattr(classifier,'support_'))

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0]==0):
  print('patient not diabetic')
else:
  print('patient is diabetic')